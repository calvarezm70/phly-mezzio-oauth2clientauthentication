{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"phly-expressive-oauth2clientauthentication This library provides a league/oauth2-client adapter for use with zend-expressive-authentication . Installation Run the following to install this library: $ composer require phly/phly-expressive-oauth2clientauthentication You will also need to install one or more of the OAuth2 providers you wish to use. As an example: $ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook Documentation Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Home"},{"location":"#phly-expressive-oauth2clientauthentication","text":"This library provides a league/oauth2-client adapter for use with zend-expressive-authentication .","title":"phly-expressive-oauth2clientauthentication"},{"location":"#installation","text":"Run the following to install this library: $ composer require phly/phly-expressive-oauth2clientauthentication You will also need to install one or more of the OAuth2 providers you wish to use. As an example: $ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook","title":"Installation"},{"location":"#documentation","text":"Documentation is in the doc tree , and can be compiled using mkdocs : $ mkdocs build You may also browse the documentation online .","title":"Documentation"},{"location":"config/","text":"Configuration In order to use this authentication adapter, you will need to provide configuration for the OAuth2 providers you plan to use. Examples are provided in the config/ directory of this component, and repeated here for purposes of documentation: Global configuration This is configuration that should be present no matter what environment you are in, and it covers the base path for the OAuth2 client callbacks and debug provider URIs. // e.g. config/autoload/oauth2-client.global.php: return [ 'oauth2clientauthentication' => [ // Configure the base path for all OAuth2 client callbacks. By default, // this is \"/auth\". // 'auth_path' => '/auth', // Configure the production and debug routes for OAuth2 client callbacks // if desired. These strings will be relative to the 'auth_path' config // as specified above. Provider names in the regex should match the keys // associated with enabled providers in configuration. The \"custom\" string // is just an example of a provider key named \"custom\" described below. 'routes' => [ // Production path. // 'production' => '/{provider:facebook|github|google|instagram|linkedin|custom}[/oauth2callback]', // Debug path. // 'debug' => '/{provider:debug|facebook|github|google|instagram|linkedin|custom}[/oauth2callback]', ], ], ]; Local/Environment-specific configuration This is configuration for the providers you wish to enable. You will need to review the [league/oauth2-client providers documentation](http://oauth2-client.thephpleague.com/providers/league/ for links to both full configuration documentation, as well as resources on how to obtain the various client identifiers and secrets you will need to use. Each provider you define needs at least the provider key with the client class name and the options key with an array which is passed to the client constructor. This information should not be shipped directly in your repository, but rather included as part of your application environment. // e.g. config/autoload/oauth2-client.local.php: return [ 'oauth2clientauthentication' => [ 'debug' => [ // Provider key must be present for factory creation. 'provider' => Debug\\DebugProvider::class, 'options' => [ // Provide this if you have provided an alternate route path via // the oauth2clientauthentication.routes.debug key: // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s', // Provide this if you want to use an alternate path for the OAuth2 // \"server\" authorization: // 'authorization_url' => '/alternate/debug/authorization', ] ], // Facebook // 'facebook' => [ // 'provider' => Provider\\Facebook::class, // 'options' => [ // 'clientId' => '{facebook-app-id}', // 'clientSecret' => '{facebook-app-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // 'graphApiVersion' => 'v2.10', // ], // ], // GitHub // 'github' => [ // 'provider' => Provider\\Github::class, // 'options' => [ // 'clientId' => '{github-client-id}', // 'clientSecret' => '{github-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // ], // ], // Google // 'google' => [ // 'provider' => Provider\\Google::class, // 'options' => [ // 'clientId' => '{google-client-id}', // 'clientSecret' => '{google-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // 'hostedDomain' => '', // scheme + domain of your app // ], // ], // Instagram // 'instagram' => [ // 'provider' => Provider\\Instagram::class, // 'options' => [ // 'clientId' => '{instagram-client-id}', // 'clientSecret' => '{instagram-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // 'host' => 'https://api.instagram.com', // Optional; this is the default // ], // ], // LinkedIn // 'linkedin' => [ // 'provider' => Provider\\LinkedIn::class, // 'options' => [ // 'clientId' => '{linkedin-client-id}', // 'clientSecret' => '{linkedin-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // ], // ], // Customized // It's possible to configure any provider that extend the League AbstractProvider, including custom // implementations or extensions. This example uses GenericProvider which can be used with any OAuth // 2.0 Server that uses Bearer tokens. // 'custom' => [ // 'provider' => Provider\\GenericProvider::class, // 'options' => [ // 'clientId' => '', // 'clientSecret' => '', // 'redirectUri' => '', // 'urlAuthorize' => '', // 'urlAccessToken' => '', // 'urlResourceOwnerDetails' => '', // ], // ], ], 'dependencies' => [ 'factories' => [ // Enable this when in debug mode: // Debug\\DebugProviderMiddleware::class => Debug\\DebugProviderMiddlewareFactory::class, ], ], ]; Pipeline configuration The various callbacks operate under a base path as specified by the oauth2clientauthentication.auth_path configuration, which defaults to /auth . You will need to pipe the Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware service to that path: // In config/pipeline.php: use Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware; $app->pipe('/auth', OAuth2CallbackMiddleware::class); @todo Detail how to pipe the callback middleware when using other middleware frameworks. Route configuration Once the above is complete, you can add Zend\\Expressive\\Authentication\\AuthenticationMiddleware to your route-specific pipelines. You will also need to pipe Zend\\Expressive\\Session\\SessionMiddleware in these pipelines as this adapter persists user information within the session. As an example: // In config/routes.php use Zend\\Expressive\\Authentication\\AuthenticationMiddleware; use Zend\\Expressive\\Session\\SessionMiddleware; $app->post('/api/books', [ SessionMiddleware::class, AuthenticationMiddleware::class, CreateBookHandler::class, ]); Create a delegator factory You may want to consider creating a delegator factory for registering these two middleware in a pipeline with any handler. As an example: php function (ContainerInterface $container, $serviceName, callable $callback) { $pipeline = new MiddlewarePipe(); $pipeline->pipe($container->get(SessionMiddleware::class)); $pipeline->pipe($container->get(AuthenticationMiddleware::class)); $pipeline->pipe($callback()); return $pipeline; }","title":"Configuration"},{"location":"config/#configuration","text":"In order to use this authentication adapter, you will need to provide configuration for the OAuth2 providers you plan to use. Examples are provided in the config/ directory of this component, and repeated here for purposes of documentation:","title":"Configuration"},{"location":"config/#global-configuration","text":"This is configuration that should be present no matter what environment you are in, and it covers the base path for the OAuth2 client callbacks and debug provider URIs. // e.g. config/autoload/oauth2-client.global.php: return [ 'oauth2clientauthentication' => [ // Configure the base path for all OAuth2 client callbacks. By default, // this is \"/auth\". // 'auth_path' => '/auth', // Configure the production and debug routes for OAuth2 client callbacks // if desired. These strings will be relative to the 'auth_path' config // as specified above. Provider names in the regex should match the keys // associated with enabled providers in configuration. The \"custom\" string // is just an example of a provider key named \"custom\" described below. 'routes' => [ // Production path. // 'production' => '/{provider:facebook|github|google|instagram|linkedin|custom}[/oauth2callback]', // Debug path. // 'debug' => '/{provider:debug|facebook|github|google|instagram|linkedin|custom}[/oauth2callback]', ], ], ];","title":"Global configuration"},{"location":"config/#localenvironment-specific-configuration","text":"This is configuration for the providers you wish to enable. You will need to review the [league/oauth2-client providers documentation](http://oauth2-client.thephpleague.com/providers/league/ for links to both full configuration documentation, as well as resources on how to obtain the various client identifiers and secrets you will need to use. Each provider you define needs at least the provider key with the client class name and the options key with an array which is passed to the client constructor. This information should not be shipped directly in your repository, but rather included as part of your application environment. // e.g. config/autoload/oauth2-client.local.php: return [ 'oauth2clientauthentication' => [ 'debug' => [ // Provider key must be present for factory creation. 'provider' => Debug\\DebugProvider::class, 'options' => [ // Provide this if you have provided an alternate route path via // the oauth2clientauthentication.routes.debug key: // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s', // Provide this if you want to use an alternate path for the OAuth2 // \"server\" authorization: // 'authorization_url' => '/alternate/debug/authorization', ] ], // Facebook // 'facebook' => [ // 'provider' => Provider\\Facebook::class, // 'options' => [ // 'clientId' => '{facebook-app-id}', // 'clientSecret' => '{facebook-app-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // 'graphApiVersion' => 'v2.10', // ], // ], // GitHub // 'github' => [ // 'provider' => Provider\\Github::class, // 'options' => [ // 'clientId' => '{github-client-id}', // 'clientSecret' => '{github-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // ], // ], // Google // 'google' => [ // 'provider' => Provider\\Google::class, // 'options' => [ // 'clientId' => '{google-client-id}', // 'clientSecret' => '{google-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // 'hostedDomain' => '', // scheme + domain of your app // ], // ], // Instagram // 'instagram' => [ // 'provider' => Provider\\Instagram::class, // 'options' => [ // 'clientId' => '{instagram-client-id}', // 'clientSecret' => '{instagram-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // 'host' => 'https://api.instagram.com', // Optional; this is the default // ], // ], // LinkedIn // 'linkedin' => [ // 'provider' => Provider\\LinkedIn::class, // 'options' => [ // 'clientId' => '{linkedin-client-id}', // 'clientSecret' => '{linkedin-client-secret}', // 'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed // ], // ], // Customized // It's possible to configure any provider that extend the League AbstractProvider, including custom // implementations or extensions. This example uses GenericProvider which can be used with any OAuth // 2.0 Server that uses Bearer tokens. // 'custom' => [ // 'provider' => Provider\\GenericProvider::class, // 'options' => [ // 'clientId' => '', // 'clientSecret' => '', // 'redirectUri' => '', // 'urlAuthorize' => '', // 'urlAccessToken' => '', // 'urlResourceOwnerDetails' => '', // ], // ], ], 'dependencies' => [ 'factories' => [ // Enable this when in debug mode: // Debug\\DebugProviderMiddleware::class => Debug\\DebugProviderMiddlewareFactory::class, ], ], ];","title":"Local/Environment-specific configuration"},{"location":"config/#pipeline-configuration","text":"The various callbacks operate under a base path as specified by the oauth2clientauthentication.auth_path configuration, which defaults to /auth . You will need to pipe the Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware service to that path: // In config/pipeline.php: use Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware; $app->pipe('/auth', OAuth2CallbackMiddleware::class); @todo Detail how to pipe the callback middleware when using other middleware frameworks.","title":"Pipeline configuration"},{"location":"config/#route-configuration","text":"Once the above is complete, you can add Zend\\Expressive\\Authentication\\AuthenticationMiddleware to your route-specific pipelines. You will also need to pipe Zend\\Expressive\\Session\\SessionMiddleware in these pipelines as this adapter persists user information within the session. As an example: // In config/routes.php use Zend\\Expressive\\Authentication\\AuthenticationMiddleware; use Zend\\Expressive\\Session\\SessionMiddleware; $app->post('/api/books', [ SessionMiddleware::class, AuthenticationMiddleware::class, CreateBookHandler::class, ]);","title":"Route configuration"},{"location":"config/#create-a-delegator-factory","text":"You may want to consider creating a delegator factory for registering these two middleware in a pipeline with any handler. As an example: php function (ContainerInterface $container, $serviceName, callable $callback) { $pipeline = new MiddlewarePipe(); $pipeline->pipe($container->get(SessionMiddleware::class)); $pipeline->pipe($container->get(AuthenticationMiddleware::class)); $pipeline->pipe($callback()); return $pipeline; }","title":"Create a delegator factory"},{"location":"debug/","text":"The Debug Provider OAuth2 providers generally require that requests for the registered client come from a specific domain \u2014 and this can be problematic when testing your OAuth2 client workflow or pages behind authentication. To help solve this problem, this package provides a custom league/oauth2-client provider, Phly\\Expressive\\OAuth2ClientAuthentication\\Debug\\DebugProvider , along with an associated \"authorization\" handler. These features are only enabled when you enable the application debug flag; when that occurs, the debug provider is added to the list of allowed providers, and its authorization handler is mapped to a route. You can configure both the authorization URI as well as the template for the callback URI in the options array: // e.g. config/autoload/oauth2-client.local.php: return [ 'oauth2clientauthentication' => [ 'debug' => [ 'provider' => Debug\\DebugProvider::class, 'options' => [ // Provide this if you have provided an alternate route path via // the oauth2clientauthentication.routes.debug key: // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s', // Provide this if you want to use an alternate path for the OAuth2 // \"server\" authorization: // 'authorization_url' => '/alternate/debug/authorization', ] ], ], ];","title":"Debug Provider"},{"location":"debug/#the-debug-provider","text":"OAuth2 providers generally require that requests for the registered client come from a specific domain \u2014 and this can be problematic when testing your OAuth2 client workflow or pages behind authentication. To help solve this problem, this package provides a custom league/oauth2-client provider, Phly\\Expressive\\OAuth2ClientAuthentication\\Debug\\DebugProvider , along with an associated \"authorization\" handler. These features are only enabled when you enable the application debug flag; when that occurs, the debug provider is added to the list of allowed providers, and its authorization handler is mapped to a route. You can configure both the authorization URI as well as the template for the callback URI in the options array: // e.g. config/autoload/oauth2-client.local.php: return [ 'oauth2clientauthentication' => [ 'debug' => [ 'provider' => Debug\\DebugProvider::class, 'options' => [ // Provide this if you have provided an alternate route path via // the oauth2clientauthentication.routes.debug key: // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s', // Provide this if you want to use an alternate path for the OAuth2 // \"server\" authorization: // 'authorization_url' => '/alternate/debug/authorization', ] ], ], ];","title":"The Debug Provider"},{"location":"intro/","text":"phly-expressive-oauth2clientauthentication This library provides a league/oauth2-client adapter for use with zend-expressive-authentication . It supports all OAuth2 Clients that inherit from League\\OAuth2\\Client\\Provider\\AbstractProvider . Installation Install via Composer: $ composer require phly/phly-expressive-oauth2clientauthentication If you are using the zend-component-installer Composer plugin , this will automatically register the shipped ConfigProvider with your application, as well as those of its dependencies (including zend-expressive-authentication and zend-expressive-session). If you are not, you will need to use the shipped Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider to add configuration to your application: use Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider; return (new ConfigProvider())(); You will also need to install one or more of the OAuth2 providers you wish to use. As an example: $ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook","title":"Introduction"},{"location":"intro/#phly-expressive-oauth2clientauthentication","text":"This library provides a league/oauth2-client adapter for use with zend-expressive-authentication . It supports all OAuth2 Clients that inherit from League\\OAuth2\\Client\\Provider\\AbstractProvider .","title":"phly-expressive-oauth2clientauthentication"},{"location":"intro/#installation","text":"Install via Composer: $ composer require phly/phly-expressive-oauth2clientauthentication If you are using the zend-component-installer Composer plugin , this will automatically register the shipped ConfigProvider with your application, as well as those of its dependencies (including zend-expressive-authentication and zend-expressive-session). If you are not, you will need to use the shipped Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider to add configuration to your application: use Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider; return (new ConfigProvider())(); You will also need to install one or more of the OAuth2 providers you wish to use. As an example: $ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook","title":"Installation"},{"location":"templates/","text":"Login Templates This package ships with a number of built-in templates for displaying the \"login\" page when a user is unauthorized; these are in the templates/ subdirectory, and map to the oauth2clientauthentication::401 template. The templates provided expose links for each of the GitHub, Google, and (when enabled) Debug providers. Further, they are written using Bootstrap theming . As such, you will likely want to override them. Below, we demonstrate each of the default shipped versions. Plates <?php $this->layout('layout::layout', [ 'title' => 'Unauthorized', ]); ?> <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/github?redirect=<?= $redirect ?>\">GitHub</a> <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/google?redirect=<?= $redirect ?>\">Google</a> <?php if ($debug) : ?> <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/debug?redirect=<?= $redirect ?>\">Debug</a> <?php endif ?> </div> </section> Twig {% extends '@layout/default.html.twig' %} {% block title %}404 Not Found{% endblock %} {% block content %} <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"{{ auth_path }}/github?redirect={{ redirect }}\">GitHub</a> <a class=\"btn btn-default\" href=\"{{ auth_path }}/google?redirect={{ redirect }}\">Google</a> {% if debug is defined %} <a class=\"btn btn-default\" href=\"{{ auth_path }}/debug?redirect={{ redirect }}\">Debug</a> {% endif %} </div> </section> {% endblock %} zend-view <?php $this->headTitle('Unauthorized') ?> <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/github?redirect=<?= $this->redirect ?>\">GitHub</a> <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/google?redirect=<?= $this->redirect ?>\">Google</a> <?php if ($debug) : ?> <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/debug?redirect=<?= $this->redirect ?>\">Debug</a> <?php endif ?> </div> </section> Mustache This example can be used via the phly-expressive-mustache renderer for zend-expressive-template: {{<layout::layout}} {{$title}}Unauthorized{{/title}} {{$content}} <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"{{auth_path}}/github?redirect={{redirect}}\">GitHub</a> <a class=\"btn btn-default\" href=\"{{auth_path}}/google?redirect={{redirect}}\">Google</a> {{#debug}} <a class=\"btn btn-default\" href=\"{{auth_path}}/debug?redirect={{redirect}}\">Debug</a> {{/debug}} </div> </section> {{/content}} {{/layout::layout}}","title":"Templates"},{"location":"templates/#login-templates","text":"This package ships with a number of built-in templates for displaying the \"login\" page when a user is unauthorized; these are in the templates/ subdirectory, and map to the oauth2clientauthentication::401 template. The templates provided expose links for each of the GitHub, Google, and (when enabled) Debug providers. Further, they are written using Bootstrap theming . As such, you will likely want to override them. Below, we demonstrate each of the default shipped versions.","title":"Login Templates"},{"location":"templates/#plates","text":"<?php $this->layout('layout::layout', [ 'title' => 'Unauthorized', ]); ?> <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/github?redirect=<?= $redirect ?>\">GitHub</a> <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/google?redirect=<?= $redirect ?>\">Google</a> <?php if ($debug) : ?> <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/debug?redirect=<?= $redirect ?>\">Debug</a> <?php endif ?> </div> </section>","title":"Plates"},{"location":"templates/#twig","text":"{% extends '@layout/default.html.twig' %} {% block title %}404 Not Found{% endblock %} {% block content %} <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"{{ auth_path }}/github?redirect={{ redirect }}\">GitHub</a> <a class=\"btn btn-default\" href=\"{{ auth_path }}/google?redirect={{ redirect }}\">Google</a> {% if debug is defined %} <a class=\"btn btn-default\" href=\"{{ auth_path }}/debug?redirect={{ redirect }}\">Debug</a> {% endif %} </div> </section> {% endblock %}","title":"Twig"},{"location":"templates/#zend-view","text":"<?php $this->headTitle('Unauthorized') ?> <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/github?redirect=<?= $this->redirect ?>\">GitHub</a> <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/google?redirect=<?= $this->redirect ?>\">Google</a> <?php if ($debug) : ?> <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/debug?redirect=<?= $this->redirect ?>\">Debug</a> <?php endif ?> </div> </section>","title":"zend-view"},{"location":"templates/#mustache","text":"This example can be used via the phly-expressive-mustache renderer for zend-expressive-template: {{<layout::layout}} {{$title}}Unauthorized{{/title}} {{$content}} <section class=\"col-md-8 col-md-offset-2 code_401\"> <h2>Unauthorized</h2> <p> You are not logged in, and therefore cannot perform this action. </p> <p> Login to continue: <p> <div class=\"btn-group-vertical\" role=\"group\"> <a class=\"btn btn-default\" href=\"{{auth_path}}/github?redirect={{redirect}}\">GitHub</a> <a class=\"btn btn-default\" href=\"{{auth_path}}/google?redirect={{redirect}}\">Google</a> {{#debug}} <a class=\"btn btn-default\" href=\"{{auth_path}}/debug?redirect={{redirect}}\">Debug</a> {{/debug}} </div> </section> {{/content}} {{/layout::layout}}","title":"Mustache"}]}