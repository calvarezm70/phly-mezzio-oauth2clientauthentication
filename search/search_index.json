{
    "docs": [
        {
            "location": "/",
            "text": "phly-expressive-oauth2clientauthentication\n\n\n\n\n\n\nThis library provides a \nleague/oauth2-client\n\nadapter for use with \nzend-expressive-authentication\n.\nIt currently supports only the OAuth2 providers officially maintained by that\nproject, including:\n\n\n\n\nFacebook\n\n\nGitHub\n\n\nGoogle\n\n\nInstagram\n\n\nLinkedIn\n\n\n\n\nInstallation\n\n\nRun the following to install this library:\n\n\n$ composer require phly/phly-expressive-oauth2clientauthentication\n\n\n\nYou will also need to install one or more of the OAuth2 providers you wish to\nuse. As an example:\n\n\n$ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook\n\n\n\nDocumentation\n\n\nDocumentation is \nin the doc tree\n, and can be compiled using \nmkdocs\n:\n\n\n$ mkdocs build\n\n\n\nYou may also \nbrowse the documentation online\n.",
            "title": "phly-expressive-oauth2clientauthentication"
        },
        {
            "location": "/#phly-expressive-oauth2clientauthentication",
            "text": "This library provides a  league/oauth2-client \nadapter for use with  zend-expressive-authentication .\nIt currently supports only the OAuth2 providers officially maintained by that\nproject, including:   Facebook  GitHub  Google  Instagram  LinkedIn",
            "title": "phly-expressive-oauth2clientauthentication"
        },
        {
            "location": "/#installation",
            "text": "Run the following to install this library:  $ composer require phly/phly-expressive-oauth2clientauthentication  You will also need to install one or more of the OAuth2 providers you wish to\nuse. As an example:  $ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook",
            "title": "Installation"
        },
        {
            "location": "/#documentation",
            "text": "Documentation is  in the doc tree , and can be compiled using  mkdocs :  $ mkdocs build  You may also  browse the documentation online .",
            "title": "Documentation"
        },
        {
            "location": "/intro/",
            "text": "phly-expressive-oauth2clientauthentication\n\n\nThis library provides a \nleague/oauth2-client\n\nadapter for use with \nzend-expressive-authentication\n.\nIt currently supports only the OAuth2 providers officially maintained by that\nproject, including:\n\n\n\n\nFacebook\n\n\nGitHub\n\n\nGoogle\n\n\nInstagram\n\n\nLinkedIn\n\n\n\n\nInstallation\n\n\nInstall via Composer:\n\n\n$ composer require phly/phly-expressive-oauth2clientauthentication\n\n\n\nIf you are using the \nzend-component-installer Composer\nplugin\n,\nthis will automatically register the shipped \nConfigProvider\n with your\napplication, as well as those of its dependencies (including\nzend-expressive-authentication and zend-expressive-session). If you are not, you\nwill need to use the shipped\n\nPhly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider\n to add configuration\nto your application:\n\n\nuse Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider;\n\nreturn (new ConfigProvider())();\n\n\n\nYou will also need to install one or more of the OAuth2 providers you wish to\nuse. As an example:\n\n\n$ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook",
            "title": "Introduction"
        },
        {
            "location": "/intro/#phly-expressive-oauth2clientauthentication",
            "text": "This library provides a  league/oauth2-client \nadapter for use with  zend-expressive-authentication .\nIt currently supports only the OAuth2 providers officially maintained by that\nproject, including:   Facebook  GitHub  Google  Instagram  LinkedIn",
            "title": "phly-expressive-oauth2clientauthentication"
        },
        {
            "location": "/intro/#installation",
            "text": "Install via Composer:  $ composer require phly/phly-expressive-oauth2clientauthentication  If you are using the  zend-component-installer Composer\nplugin ,\nthis will automatically register the shipped  ConfigProvider  with your\napplication, as well as those of its dependencies (including\nzend-expressive-authentication and zend-expressive-session). If you are not, you\nwill need to use the shipped Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider  to add configuration\nto your application:  use Phly\\Expressive\\OAuth2ClientAuthentication\\ConfigProvider;\n\nreturn (new ConfigProvider())();  You will also need to install one or more of the OAuth2 providers you wish to\nuse. As an example:  $ composer require league/oauth2-instagram league/oauth2-google league/oauth2-facebook",
            "title": "Installation"
        },
        {
            "location": "/config/",
            "text": "Configuration\n\n\nIn order to use this authentication adapter, you will need to provide\nconfiguration for the OAuth2 providers you plan to use.\n\n\nExamples are provided in the \nconfig/\n directory of this component, and repeated\nhere for purposes of documentation:\n\n\nGlobal configuration\n\n\nThis is configuration that should be present no matter what environment you are\nin, and it covers the base path for the OAuth2 client callbacks and debug\nprovider URIs.\n\n\n// e.g. config/autoload/oauth2-client.global.php:\n\nreturn [\n    'oauth2clientauthentication' => [\n        // Configure the base path for all OAuth2 client callbacks. By default,\n        // this is \"/auth\".\n        // 'auth_path' => '/auth',\n\n        // Configure the production and debug routes for OAuth2 client callbacks\n        // if desired. These strings will be relative to the 'auth_path' config\n        // as specified above.\n        'routes' => [\n            // Production path.\n            // 'production' => '/{provider:facebook|github|google|instagram}|linkedin[/oauth2callback]',\n\n            // Debug path.\n            // 'debug' => '/{provider:debug|facebook|github|google|instagram|linkedin}[/oauth2callback]',\n        ],\n    ],\n];\n\n\n\nLocal/Environment-specific configuration\n\n\nThis is configuration for the providers you wish to enable. You will need to\nreview the [league/oauth2-client providers documentation](http://oauth2-client.thephpleague.com/providers/league/\nfor links to both full configuration documentation, as well as resources on how\nto obtain the various client identifiers and secrets you will need to use.\n\n\nThis information should \nnot\n be shipped directly in your repository, but rather\nincluded as part of your application environment.\n\n\n// e.g. config/autoload/oauth2-client.local.php:\n\nreturn [\n    'oauth2clientauthentication' => [\n        // Debug\n        // This is the debug provider shipped within this component for purposes\n        // of testing the OAuth2 client workflow within your applications.\n        'debug' => [\n            // Provide this if you have provided an alternate route path via\n            // the oauth2clientauthentication.routes.debug key:\n            // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s',\n\n            // Provide this if you want to use an alternate path for the OAuth2\n            // \"server\" authorization:\n            // 'authorization_url' => '/alternate/debug/authorization',\n        ],\n\n        // Facebook\n        // 'facebook' => [\n        //     'clientId' => '{facebook-app-id}',\n        //     'clientSecret' => '{facebook-app-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        //     'graphApiVersion' => 'v2.10',\n        // ],\n\n        // GitHub\n        // 'github' => [\n        //     'clientId' => '{github-client-id}',\n        //     'clientSecret' => '{github-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        // ],\n\n        // Google\n        // 'google' => [\n        //     'clientId' => '{google-client-id}',\n        //     'clientSecret' => '{google-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        //     'hostedDomain' => '', // scheme + domain of your app\n        // ],\n\n        // Instagram\n        // 'instagram' => [\n        //     'clientId' => '{instagram-client-id}',\n        //     'clientSecret' => '{instagram-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        //     'host' => 'https://api.instagram.com', // Optional; this is the default\n        // ],\n\n        // LinkedIn\n        // 'linkedin' => [\n        //     'clientId' => '{linkedin-client-id}',\n        //     'clientSecret' => '{linkedin-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        // ],\n    ],\n    'dependencies' => [\n        'factories' => [\n            // Enable this when in debug mode:\n            // Debug\\DebugProviderMiddleware::class => Debug\\DebugProviderMiddlewareFactory::class,\n        ],\n    ],\n];\n\n\n\nPipeline configuration\n\n\nThe various callbacks operate under a base path as specified by the\n\noauth2clientauthentication.auth_path\n configuration, which defaults to \n/auth\n.\nYou will need to pipe the \nPhly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware\n\nservice to that path:\n\n\n// In config/pipeline.php:\n\nuse Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware;\n\n$app->pipe('/auth', OAuth2CallbackMiddleware::class);\n\n\n\n@todo Detail how to pipe the callback middleware when using other middleware frameworks.\n\n\nRoute configuration\n\n\nOnce the above is complete, you can add\n\nZend\\Expressive\\Authentication\\AuthenticationMiddleware\n to your route-specific\npipelines. You will also need to pipe\n\nZend\\Expressive\\Session\\SessionMiddleware\n in these pipelines as this adapter\npersists user information within the session.\n\n\nAs an example:\n\n\n// In config/routes.php\n\nuse Zend\\Expressive\\Authentication\\AuthenticationMiddleware;\nuse Zend\\Expressive\\Session\\SessionMiddleware;\n\n$app->post('/api/books', [\n    SessionMiddleware::class,\n    AuthenticationMiddleware::class,\n    CreateBookHandler::class,\n]);\n\n\n\n\n\nCreate a delegator factory\n\n\nYou may want to consider creating a delegator factory for registering these\ntwo middleware in a pipeline with any handler. As an example:\n\n\nfunction (ContainerInterface $container, $serviceName, callable $callback)\n{\n    $pipeline = new MiddlewarePipe();\n    $pipeline->pipe($container->get(SessionMiddleware::class));\n    $pipeline->pipe($container->get(AuthenticationMiddleware::class));\n    $pipeline->pipe($callback());\n    return $pipeline;\n}",
            "title": "Configuration"
        },
        {
            "location": "/config/#configuration",
            "text": "In order to use this authentication adapter, you will need to provide\nconfiguration for the OAuth2 providers you plan to use.  Examples are provided in the  config/  directory of this component, and repeated\nhere for purposes of documentation:",
            "title": "Configuration"
        },
        {
            "location": "/config/#global-configuration",
            "text": "This is configuration that should be present no matter what environment you are\nin, and it covers the base path for the OAuth2 client callbacks and debug\nprovider URIs.  // e.g. config/autoload/oauth2-client.global.php:\n\nreturn [\n    'oauth2clientauthentication' => [\n        // Configure the base path for all OAuth2 client callbacks. By default,\n        // this is \"/auth\".\n        // 'auth_path' => '/auth',\n\n        // Configure the production and debug routes for OAuth2 client callbacks\n        // if desired. These strings will be relative to the 'auth_path' config\n        // as specified above.\n        'routes' => [\n            // Production path.\n            // 'production' => '/{provider:facebook|github|google|instagram}|linkedin[/oauth2callback]',\n\n            // Debug path.\n            // 'debug' => '/{provider:debug|facebook|github|google|instagram|linkedin}[/oauth2callback]',\n        ],\n    ],\n];",
            "title": "Global configuration"
        },
        {
            "location": "/config/#localenvironment-specific-configuration",
            "text": "This is configuration for the providers you wish to enable. You will need to\nreview the [league/oauth2-client providers documentation](http://oauth2-client.thephpleague.com/providers/league/\nfor links to both full configuration documentation, as well as resources on how\nto obtain the various client identifiers and secrets you will need to use.  This information should  not  be shipped directly in your repository, but rather\nincluded as part of your application environment.  // e.g. config/autoload/oauth2-client.local.php:\n\nreturn [\n    'oauth2clientauthentication' => [\n        // Debug\n        // This is the debug provider shipped within this component for purposes\n        // of testing the OAuth2 client workflow within your applications.\n        'debug' => [\n            // Provide this if you have provided an alternate route path via\n            // the oauth2clientauthentication.routes.debug key:\n            // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s',\n\n            // Provide this if you want to use an alternate path for the OAuth2\n            // \"server\" authorization:\n            // 'authorization_url' => '/alternate/debug/authorization',\n        ],\n\n        // Facebook\n        // 'facebook' => [\n        //     'clientId' => '{facebook-app-id}',\n        //     'clientSecret' => '{facebook-app-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        //     'graphApiVersion' => 'v2.10',\n        // ],\n\n        // GitHub\n        // 'github' => [\n        //     'clientId' => '{github-client-id}',\n        //     'clientSecret' => '{github-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        // ],\n\n        // Google\n        // 'google' => [\n        //     'clientId' => '{google-client-id}',\n        //     'clientSecret' => '{google-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        //     'hostedDomain' => '', // scheme + domain of your app\n        // ],\n\n        // Instagram\n        // 'instagram' => [\n        //     'clientId' => '{instagram-client-id}',\n        //     'clientSecret' => '{instagram-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        //     'host' => 'https://api.instagram.com', // Optional; this is the default\n        // ],\n\n        // LinkedIn\n        // 'linkedin' => [\n        //     'clientId' => '{linkedin-client-id}',\n        //     'clientSecret' => '{linkedin-client-secret}',\n        //     'redirectUri' => '', // based on the auth_path + production route; must be fully qualifed\n        // ],\n    ],\n    'dependencies' => [\n        'factories' => [\n            // Enable this when in debug mode:\n            // Debug\\DebugProviderMiddleware::class => Debug\\DebugProviderMiddlewareFactory::class,\n        ],\n    ],\n];",
            "title": "Local/Environment-specific configuration"
        },
        {
            "location": "/config/#pipeline-configuration",
            "text": "The various callbacks operate under a base path as specified by the oauth2clientauthentication.auth_path  configuration, which defaults to  /auth .\nYou will need to pipe the  Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware \nservice to that path:  // In config/pipeline.php:\n\nuse Phly\\Expressive\\OAuth2ClientAuthentication\\OAuth2CallbackMiddleware;\n\n$app->pipe('/auth', OAuth2CallbackMiddleware::class);  @todo Detail how to pipe the callback middleware when using other middleware frameworks.",
            "title": "Pipeline configuration"
        },
        {
            "location": "/config/#route-configuration",
            "text": "Once the above is complete, you can add Zend\\Expressive\\Authentication\\AuthenticationMiddleware  to your route-specific\npipelines. You will also need to pipe Zend\\Expressive\\Session\\SessionMiddleware  in these pipelines as this adapter\npersists user information within the session.  As an example:  // In config/routes.php\n\nuse Zend\\Expressive\\Authentication\\AuthenticationMiddleware;\nuse Zend\\Expressive\\Session\\SessionMiddleware;\n\n$app->post('/api/books', [\n    SessionMiddleware::class,\n    AuthenticationMiddleware::class,\n    CreateBookHandler::class,\n]);",
            "title": "Route configuration"
        },
        {
            "location": "/config/#create-a-delegator-factory",
            "text": "You may want to consider creating a delegator factory for registering these\ntwo middleware in a pipeline with any handler. As an example:  function (ContainerInterface $container, $serviceName, callable $callback)\n{\n    $pipeline = new MiddlewarePipe();\n    $pipeline->pipe($container->get(SessionMiddleware::class));\n    $pipeline->pipe($container->get(AuthenticationMiddleware::class));\n    $pipeline->pipe($callback());\n    return $pipeline;\n}",
            "title": "Create a delegator factory"
        },
        {
            "location": "/debug/",
            "text": "The Debug Provider\n\n\nOAuth2 providers generally require that requests for the registered client come\nfrom a specific domain \u2014 and this can be problematic when testing your\nOAuth2 client workflow or pages behind authentication.\n\n\nTo help solve this problem, this package provides a custom league/oauth2-client\nprovider, \nPhly\\Expressive\\OAuth2ClientAuthentication\\Debug\\DebugProvider\n,\nalong with an associated \"authorization\" handler.\n\n\nThese features are only enabled when you enable the application \ndebug\n flag;\nwhen that occurs, the debug provider is added to the list of allowed providers,\nand its authorization handler is mapped to a route.\n\n\nYou can configure both the authorization URI as well as the template for the\ncallback URI:\n\n\n// e.g. config/autoload/oauth2-client.local.php:\n\nreturn [\n    'oauth2clientauthentication' => [\n        'debug' => [\n            // Provide this if you have provided an alternate route path via\n            // the oauth2clientauthentication.routes.debug key:\n            // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s',\n\n            // Provide this if you want to use an alternate path for the OAuth2\n            // \"server\" authorization:\n            // 'authorization_url' => '/alternate/debug/authorization',\n        ],\n    ],\n];",
            "title": "Debug Provider"
        },
        {
            "location": "/debug/#the-debug-provider",
            "text": "OAuth2 providers generally require that requests for the registered client come\nfrom a specific domain \u2014 and this can be problematic when testing your\nOAuth2 client workflow or pages behind authentication.  To help solve this problem, this package provides a custom league/oauth2-client\nprovider,  Phly\\Expressive\\OAuth2ClientAuthentication\\Debug\\DebugProvider ,\nalong with an associated \"authorization\" handler.  These features are only enabled when you enable the application  debug  flag;\nwhen that occurs, the debug provider is added to the list of allowed providers,\nand its authorization handler is mapped to a route.  You can configure both the authorization URI as well as the template for the\ncallback URI:  // e.g. config/autoload/oauth2-client.local.php:\n\nreturn [\n    'oauth2clientauthentication' => [\n        'debug' => [\n            // Provide this if you have provided an alternate route path via\n            // the oauth2clientauthentication.routes.debug key:\n            // 'callback_uri_template' => '/alternate/debug/callback?code=%s&state=%s',\n\n            // Provide this if you want to use an alternate path for the OAuth2\n            // \"server\" authorization:\n            // 'authorization_url' => '/alternate/debug/authorization',\n        ],\n    ],\n];",
            "title": "The Debug Provider"
        },
        {
            "location": "/templates/",
            "text": "Login Templates\n\n\nThis package ships with a number of built-in templates for displaying the\n\"login\" page when a user is unauthorized; these are in the \ntemplates/\n\nsubdirectory, and map to the \noauth2clientauthentication::401\n template.\n\n\nThe templates provided expose links for each of the GitHub, Google, and (when\nenabled) Debug providers. Further, they are written using \nBootstrap\ntheming\n. As such, you will likely want to override\nthem.\n\n\nBelow, we demonstrate each of the default shipped versions.\n\n\nPlates\n\n\n<?php $this->layout('layout::layout', [\n    'title' => 'Unauthorized',\n]); ?>\n\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/github?redirect=<?= $redirect ?>\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/google?redirect=<?= $redirect ?>\">Google</a>\n    <?php if ($debug) : ?>\n    <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/debug?redirect=<?= $redirect ?>\">Debug</a>\n    <?php endif ?>\n  </div>\n</section>\n\n\n\nTwig\n\n\n{% extends '@layout/default.html.twig' %}\n\n{% block title %}404 Not Found{% endblock %}\n\n{% block content %}\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"{{ auth_path }}/github?redirect={{ redirect }}\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"{{ auth_path }}/google?redirect={{ redirect }}\">Google</a>\n    {% if debug is defined %}\n    <a class=\"btn btn-default\" href=\"{{ auth_path }}/debug?redirect={{ redirect }}\">Debug</a>\n    {% endif %}\n  </div>\n</section>\n{% endblock %}\n\n\n\nzend-view\n\n\n<?php $this->headTitle('Unauthorized') ?>\n\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/github?redirect=<?= $this->redirect ?>\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/google?redirect=<?= $this->redirect ?>\">Google</a>\n    <?php if ($debug) : ?>\n    <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/debug?redirect=<?= $this->redirect ?>\">Debug</a>\n    <?php endif ?>\n  </div>\n</section>\n\n\n\nMustache\n\n\nThis example can be used via the \n\nphly-expressive-mustache\n\nrenderer for zend-expressive-template:\n\n\n{{<layout::layout}}\n{{$title}}Unauthorized{{/title}}\n{{$content}}\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"{{auth_path}}/github?redirect={{redirect}}\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"{{auth_path}}/google?redirect={{redirect}}\">Google</a>\n    {{#debug}}\n    <a class=\"btn btn-default\" href=\"{{auth_path}}/debug?redirect={{redirect}}\">Debug</a>\n    {{/debug}}\n  </div>\n</section>\n{{/content}}\n{{/layout::layout}}",
            "title": "Templates"
        },
        {
            "location": "/templates/#login-templates",
            "text": "This package ships with a number of built-in templates for displaying the\n\"login\" page when a user is unauthorized; these are in the  templates/ \nsubdirectory, and map to the  oauth2clientauthentication::401  template.  The templates provided expose links for each of the GitHub, Google, and (when\nenabled) Debug providers. Further, they are written using  Bootstrap\ntheming . As such, you will likely want to override\nthem.  Below, we demonstrate each of the default shipped versions.",
            "title": "Login Templates"
        },
        {
            "location": "/templates/#plates",
            "text": "<?php $this->layout('layout::layout', [\n    'title' => 'Unauthorized',\n]); ?>\n\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/github?redirect=<?= $redirect ?>\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/google?redirect=<?= $redirect ?>\">Google</a>\n    <?php if ($debug) : ?>\n    <a class=\"btn btn-default\" href=\"<?= $auth_path ?>/debug?redirect=<?= $redirect ?>\">Debug</a>\n    <?php endif ?>\n  </div>\n</section>",
            "title": "Plates"
        },
        {
            "location": "/templates/#twig",
            "text": "{% extends '@layout/default.html.twig' %}\n\n{% block title %}404 Not Found{% endblock %}\n\n{% block content %}\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"{{ auth_path }}/github?redirect={{ redirect }}\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"{{ auth_path }}/google?redirect={{ redirect }}\">Google</a>\n    {% if debug is defined %}\n    <a class=\"btn btn-default\" href=\"{{ auth_path }}/debug?redirect={{ redirect }}\">Debug</a>\n    {% endif %}\n  </div>\n</section>\n{% endblock %}",
            "title": "Twig"
        },
        {
            "location": "/templates/#zend-view",
            "text": "<?php $this->headTitle('Unauthorized') ?>\n\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/github?redirect=<?= $this->redirect ?>\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/google?redirect=<?= $this->redirect ?>\">Google</a>\n    <?php if ($debug) : ?>\n    <a class=\"btn btn-default\" href=\"<?= $this->auth_path ?>/debug?redirect=<?= $this->redirect ?>\">Debug</a>\n    <?php endif ?>\n  </div>\n</section>",
            "title": "zend-view"
        },
        {
            "location": "/templates/#mustache",
            "text": "This example can be used via the  phly-expressive-mustache \nrenderer for zend-expressive-template:  {{<layout::layout}}\n{{$title}}Unauthorized{{/title}}\n{{$content}}\n<section class=\"col-md-8 col-md-offset-2 code_401\">\n  <h2>Unauthorized</h2>\n\n  <p>\n    You are not logged in, and therefore cannot perform this action.\n  </p>\n\n  <p>\n    Login to continue:\n  <p>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <a class=\"btn btn-default\" href=\"{{auth_path}}/github?redirect={{redirect}}\">GitHub</a>\n    <a class=\"btn btn-default\" href=\"{{auth_path}}/google?redirect={{redirect}}\">Google</a>\n    {{#debug}}\n    <a class=\"btn btn-default\" href=\"{{auth_path}}/debug?redirect={{redirect}}\">Debug</a>\n    {{/debug}}\n  </div>\n</section>\n{{/content}}\n{{/layout::layout}}",
            "title": "Mustache"
        }
    ]
}